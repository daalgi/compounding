{"version":3,"sources":["Components/CustomSlider.js","Components/Common.js","utils.js","Components/Form.js","Components/Analysis.js","Components/Chart.js","App.js","index.js"],"names":["StyledSlider","withStyles","root","track","height","backgroundColor","rail","opacity","mark","width","marginTop","markLabel","color","markActive","thumb","boxShadow","Slider","CustomSlider","label","name","value","defaultValue","min","max","step","marks","factor","suffix","onChange","className","id","onChangeCommitted","e","target","parentNode","map","v","valueLabelDisplay","Subtitle","children","bold","NUM_SIMULATIONS","round","decimals","Math","pow","roundToString","rounded","parseFloat","parseInt","toString","roundedDecimals","split","length","Array","fill","join","convertToMoney","convertToPercetage","normalDistribution","arr","n","m","reduce","acc","mean","standardDeviation","sqrt","x","evalMonth","accumInvested","monthlyInvestment","roiMean","roiStsdv","roi","stdDev","u","s","random","log","interest","evalYear","year","yearsToRetire","initialInvestment","strategy","monthlyDeposits","monthlyWithdrawals","i","month","push","obj","capitalContributions","evalScenario","scenario","lastYear","annualRes","yearBankrupcy","y","retirementStart","Date","getFullYear","capital","deposited","withdrawn","o","minimum","maximum","SCENARIO_INPUTS","RETURNS_INPUTS","defaultValues","yearsInRetirement","Form","setState","useState","input","setInput","useEffect","handleCalculations","handleChange","res","constant","constantSimulation","randomSimulation","lastYearCapital","thisYear","plotData","yearlyWithdrawals","firstYearGains","probabilities","noBankrupcy","lastYearGEdeposited","runAnalysis","onSubmit","preventDefault","type","InfoCard","title","info","item","index","key","text","Analysis","state","variant","Tooltip","data","Chart","years","margin","top","right","bottom","left","xScale","yScale","stacked","reverse","yFormat","tooltip","point","axisTop","axisRight","axisBottom","tickValues","this","retirement","last","legend","legendOffset","legendPosition","axisLeft","orient","theme","background","textColor","fontSize","axis","domain","line","stroke","strokeWidth","ticks","grid","crosshair","container","pointSize","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","defaultState","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2425ff54.chunk.js","sourcesContent":["import Slider from '@material-ui/core/Slider'\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\n\r\nconst StyledSlider = withStyles({\r\n    root: {\r\n        // color: \"white\"\r\n    },\r\n    track: {\r\n        height: 4,\r\n        backgroundColor: 'hsl(220, 56%, 58%)',\r\n    },\r\n    rail: {\r\n        height: 2,\r\n        opacity: 0.5,\r\n        backgroundColor: 'hsl(0, 0%, 70%)',\r\n    },\r\n    mark: {\r\n        backgroundColor: 'hsl(0, 0%, 50%)',\r\n        // color: 'hsl(0, 0%, 80%)',\r\n        height: 8,\r\n        width: 2,\r\n        marginTop: -3,\r\n    },\r\n    markLabel: {\r\n        color: 'hsl(0, 0%, 70%)',\r\n    },\r\n    markActive: {\r\n        opacity: 1,\r\n        backgroundColor: 'currentColor',\r\n    },\r\n    thumb: {\r\n        backgroundColor: 'hsl(220, 56%, 78%)',\r\n        \"&:focus,&:hover,&$active\": {\r\n            boxShadow: \"inherit\"\r\n          }\r\n    },\r\n    // valueLabel: {\r\n    //     '& *': {\r\n    //         backgroundColor: 'hsl(0, 0%, 80%)',\r\n    //         color: 'hsl(0, 0%, 80%)',\r\n    //     },\r\n    // },\r\n})(Slider)\r\n\r\nconst CustomSlider = ({\r\n    label, name, value, defaultValue = 0, min = 0, max = 100, step = 1,\r\n    marks = null, factor = 1, suffix = \"\", onChange = null\r\n}) =>\r\n    <div className=\"input-item\">\r\n        {/* <p className=\"input-label\">{label}: {value * factor}{suffix}</p> */}\r\n        <p className=\"input-label\">{label(value)}</p>\r\n        <StyledSlider\r\n            id={name}\r\n            min={min}\r\n            max={max}\r\n            step={step}\r\n            // value={value}\r\n            defaultValue={defaultValue}\r\n            // onChange={(e, value) => onChange(e.target.parentNode.id, value)}\r\n            onChangeCommitted={(e, value) =>\r\n                onChange(e.target.parentNode.id, value)}\r\n            // marks={Object.keys(marks).map(k => ({ value: k, label: marks[k] }))}\r\n            marks={marks?.map(v =>\r\n                ({ \"label\": `${v * factor}${suffix}`, \"value\": v }))}\r\n            valueLabelDisplay=\"auto\"\r\n        />\r\n    </div>\r\n\r\nexport default CustomSlider","const Subtitle = ({ children, bold=false }) =>\r\n    <p className=\"subtitle\">\r\n        {children}\r\n    </p>\r\n\r\n\r\nexport {\r\n    Subtitle\r\n}","const NUM_SIMULATIONS = 1000\r\n\r\n// FUNCTIONS TO SHOW NUMERIC RESULTS\r\n\r\n/**\r\n * Returns a rounded number\r\n * @param {float} value \r\n * @param {integer} decimals \r\n */\r\nconst round = (value, decimals = 1) =>\r\n    Math.round(value * Math.pow(10, decimals)) / Math.pow(10, decimals)\r\n\r\n/**\r\n * Returns a string with the number rounded\r\n * @param {float} value \r\n * @param {integer} decimals \r\n */\r\nconst roundToString = (value, decimals = 1) => {\r\n    // Round the number and make sure it's a float (with decimal point)\r\n    let rounded = parseFloat(round(value, decimals))\r\n    \r\n    if (decimals === 0)\r\n        return parseInt(rounded).toString()\r\n    \r\n    let roundedDecimals = rounded % 1 === 0 \r\n        ? 0 \r\n        : rounded.toString().split('.')[1].length\r\n    \r\n    if (roundedDecimals === 0) \r\n        return rounded.toString() + '.' + Array(decimals-roundedDecimals).fill('0').join('')\r\n\r\n    if (roundedDecimals < decimals)\r\n        return rounded.toString() + Array(decimals-roundedDecimals).fill('0').join('')\r\n    \r\n    return rounded.toString()\r\n}\r\n\r\n/**\r\n * Returns a string with the rounded amount of money using \r\n * a suffix (k or M) if the value is in the order of thousands or millions\r\n * @param {float} value \r\n * @param {integer} decimals \r\n */\r\nconst convertToMoney = (value, decimals = 1) => {\r\n    if (value < 1000)\r\n        return roundToString(value, decimals)\r\n    if (value < 1e6)\r\n        return roundToString(value / 1e3, decimals) + 'k'\r\n        return roundToString(value / 1e6, decimals) + 'M'\r\n}\r\n\r\n/**\r\n * Returns a string with the amount of money using a suffix (k or M) \r\n * if needed the value is in the order of thousands or millions.\r\n * Example: convertToPercetage(0.88, 1) = \"88%\"\r\n * @param {float} value \r\n * @param {integer} decimals \r\n */\r\nconst convertToPercetage = (value, decimals = 0) =>\r\n    roundToString(value * 100, decimals) + '%'\r\n\r\n\r\n// FUNCTIONS TO HANDLE RANDOM NUMBERS\r\n\r\n/**\r\n * Marsaglia polar method to generate random gaussian numbers\r\n * @param {float} mean \r\n * @param {float} stdDev standard deviation\r\n */\r\nconst random = (mean, stdDev) => {\r\n    let u, v, s\r\n    do {\r\n        u = Math.random() * 2 - 1\r\n        v = Math.random() * 2 - 1\r\n        s = u * u + v * v\r\n    } while (s >= 1 || s === 0)\r\n    s = Math.sqrt(-2.0 * Math.log(s) / s)\r\n\r\n    return mean + stdDev * u * s\r\n}\r\n\r\n/**\r\n * Returns an object { mean, standardDeviation }\r\n * of the normal distribution of the array of numbers `arr`\r\n * @param {Array} arr \r\n */\r\nconst normalDistribution = arr => {\r\n    const n = arr.length\r\n    if (n > 0) {\r\n        const m = arr.reduce((acc, v) => acc + v) / n\r\n        return {\r\n            mean: m,\r\n            standardDeviation: Math.sqrt(arr\r\n                .map(x => Math.pow(x - m, 2))\r\n                .reduce((acc, v) => acc + v) / n)\r\n        }\r\n    }\r\n    return {}\r\n}\r\n\r\n\r\n// FUNCTIOS TO EVALUATE THE INVESTMENT EVOLUTION\r\n\r\nconst evalMonth = ({\r\n    accumInvested,\r\n    monthlyInvestment,\r\n    roiMean,\r\n    roiStsdv\r\n}) => {\r\n    const roi = roiStsdv === 0 ? roiMean : random(roiMean, roiStsdv)\r\n    accumInvested += monthlyInvestment\r\n    //console.log(accumInvested, monthlyInvestment, roi)\r\n    const interest = accumInvested * roi\r\n    return {\r\n        roi,\r\n        interest,\r\n        accumInvested: accumInvested + interest\r\n    }\r\n}\r\n\r\nconst evalYear = ({\r\n    year,\r\n    yearsToRetire,\r\n    initialInvestment,\r\n    strategy\r\n}) => {\r\n    let { monthlyDeposits, monthlyWithdrawals, roiMean, roiStsdv } = strategy\r\n    if (initialInvestment <= 0)\r\n        return {\r\n            year,\r\n            accumInvested: 0\r\n        }\r\n    let accumInvested = initialInvestment\r\n    let arr = []\r\n    let monthlyInvestment = year < yearsToRetire\r\n        ? monthlyDeposits\r\n        : -monthlyWithdrawals\r\n    roiMean /= 12\r\n    roiStsdv /= Math.sqrt(12)\r\n    for (let i = 0; i < 12; i++) {\r\n        let month = evalMonth({ accumInvested, monthlyInvestment, roiMean, roiStsdv })\r\n        accumInvested = month.accumInvested\r\n        arr.push(month)\r\n    }\r\n    let obj = {\r\n        year,\r\n        capitalContributions: 12 * monthlyInvestment,\r\n        accumInvested: accumInvested < 0 ? 0 : accumInvested\r\n    }\r\n    obj.interest = accumInvested - initialInvestment - obj.capitalContributions\r\n    obj.roi = (accumInvested - 12 * monthlyInvestment) / initialInvestment - 1\r\n    //console.log(arr)\r\n    return obj\r\n}\r\n\r\nconst evalScenario = scenario => {\r\n    let {\r\n        yearsToRetire, initialInvestment,\r\n        monthlyDeposits, monthlyWithdrawals,\r\n        roiMean, roiStsdv, lastYear } = scenario\r\n    let year = 1\r\n    let annualRes = []\r\n    let accumInvested = initialInvestment\r\n    let yearBankrupcy = null\r\n\r\n    while (year <= lastYear) {\r\n\r\n        let y = evalYear({\r\n            year,\r\n            yearsToRetire,\r\n            initialInvestment: accumInvested,\r\n            strategy: {\r\n                monthlyDeposits, monthlyWithdrawals,\r\n                roiMean, roiStsdv\r\n            }\r\n        })\r\n\r\n        if (!yearBankrupcy && accumInvested === 0)\r\n            yearBankrupcy = year\r\n\r\n        annualRes.push(y)\r\n        accumInvested = y.accumInvested\r\n\r\n        year++\r\n    }\r\n\r\n    return {\r\n        retirementStart: {\r\n            year: new Date().getFullYear() + yearsToRetire,\r\n            accumInvested: annualRes[Math.max(yearsToRetire - 1, 0)].accumInvested\r\n        },\r\n        yearBankrupcy,\r\n        annualRes,\r\n        capital: {\r\n            deposited: initialInvestment + monthlyDeposits * 12 * yearsToRetire,\r\n            withdrawn: monthlyWithdrawals * 12 * (lastYear - yearsToRetire),\r\n            lastYear: annualRes[annualRes.length - 1].accumInvested\r\n        },\r\n        roi: {\r\n            mean: annualRes.reduce((acc, o) => acc + o.roi, 0) / annualRes.length,\r\n            minimum: Math.min(...annualRes.map(o => o.roi)),\r\n            maximum: Math.max(...annualRes.map(o => o.roi))\r\n        }\r\n    }\r\n}\r\n\r\nconst runAnalysis = (constant, random) => {\r\n    let lastYear = constant.yearsToRetire + constant.yearsInRetirement\r\n    constant.lastYear = lastYear\r\n    const constantSimulation = evalScenario({ ...constant })\r\n\r\n    random.lastYear = lastYear\r\n    const randomSimulation = evalScenario({ ...random })\r\n\r\n    let lastYearCapital = []\r\n    for (let i = 0; i < NUM_SIMULATIONS; i++) {\r\n        lastYearCapital.push(evalScenario({ ...random }).capital.lastYear)\r\n    }\r\n    let thisYear = new Date().getFullYear()\r\n    let plotData = constantSimulation.annualRes.map((v, i) =>\r\n    ({\r\n        year: v.year + thisYear,\r\n        constant: v.accumInvested / NUM_SIMULATIONS,\r\n        random: randomSimulation.annualRes[i].accumInvested / NUM_SIMULATIONS\r\n    })\r\n    )\r\n\r\n    return {\r\n        scenario: {\r\n            initialInvestment: constant.initialInvestment,\r\n            monthlyDeposits: constant.monthlyDeposits,\r\n            monthlyWithdrawals: constant.monthlyWithdrawals,\r\n            yearlyWithdrawals: constant.monthlyWithdrawals * 12\r\n        },\r\n        retirementStart: {\r\n            year: constantSimulation.retirementStart.year,\r\n            constant: constantSimulation.retirementStart.accumInvested,\r\n            random: randomSimulation.retirementStart.accumInvested,\r\n            firstYearGains: plotData[constant.yearsToRetire].constant - plotData[constant.yearsToRetire-1].constant\r\n        },\r\n        lastYear: {\r\n            year: thisYear + constant.lastYear,\r\n            deposited: constantSimulation.capital.deposited,\r\n            withdrawn: constantSimulation.capital.withdrawn,\r\n            constant: constantSimulation.capital.lastYear,\r\n            random: randomSimulation.capital.lastYear,\r\n            normalDistribution: normalDistribution(lastYearCapital)\r\n        },\r\n        yearBankrupcy: {\r\n            constant: constantSimulation.yearBankrupcy && (\r\n                thisYear + constantSimulation.yearBankrupcy),\r\n            random: randomSimulation.yearBankrupcy && (\r\n                thisYear + randomSimulation.yearBankrupcy),\r\n        },\r\n        probabilities: {\r\n            noBankrupcy: lastYearCapital.reduce((acc, y) =>\r\n                y > 0\r\n                    ? acc + 1\r\n                    : acc, 0\r\n            ) / lastYearCapital.length,\r\n            lastYearGEdeposited: lastYearCapital.reduce((acc, y) =>\r\n                y >= constantSimulation.capital.deposited\r\n                    ? acc + 1\r\n                    : acc, 0\r\n            ) / lastYearCapital.length\r\n        },\r\n        plotData,\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    round,\r\n    roundToString,\r\n    convertToMoney,\r\n    convertToPercetage,\r\n\r\n    random,\r\n    normalDistribution,\r\n\r\n    evalMonth,\r\n    evalYear,\r\n    evalScenario,\r\n    runAnalysis\r\n}","import { useState, useEffect } from 'react'\r\n\r\nimport CustomSlider from './CustomSlider'\r\nimport { Subtitle } from './Common'\r\nimport { runAnalysis } from '../utils'\r\n\r\n\r\nconst SCENARIO_INPUTS = [\r\n    {\r\n        label: value => `Years to retire: ${value}`,\r\n        name: \"yearsToRetire\",\r\n        min: 0, max: 50, step: 1,\r\n        marks: [0, 10, 20, 30, 40, 50]\r\n    }, {\r\n        label: value => `Initial investment: ${value/1000}k`,\r\n        name: \"initialInvestment\",\r\n        min: 0, max: 500e3, step: 1000,\r\n        marks: [0, 100e3, 200e3, 300e3, 400e3, 500e3],\r\n        factor: 0.001,\r\n        suffix: \"k\"\r\n    }, {\r\n        label: value => `Monthly deposit: ${value}`,\r\n        name: \"monthlyDeposits\",\r\n        min: 0, max: 3000, step: 100,\r\n        marks: [0, 500, 1000, 2000, 3000]\r\n    }, {\r\n        label: value => `Monthly withdrawal: ${value}`,\r\n        name: \"monthlyWithdrawals\",\r\n        min: 0, max: 3000, step: 100,\r\n        marks: [0, 500, 1000, 2000, 3000]\r\n    }, {\r\n        label: value => `Years in retirement: ${value}`,\r\n        name: \"yearsInRetirement\",\r\n        min: 20, max: 60, step: 5,\r\n        marks: [20, 30, 40, 50, 60]\r\n    },\r\n]\r\n\r\nconst RETURNS_INPUTS = [\r\n    {\r\n        label: value => `Mean: ${value}%`,\r\n        name: \"roiMean\",\r\n        min: 0, max: 50, step: 1,\r\n        marks: [0, 10, 20, 30, 40, 50]\r\n    }, {\r\n        label: value => `Standard deviation: ${value}%`,\r\n        name: \"roiStsdv\",\r\n        min: 0, max: 50, step: 1,\r\n        marks: [0, 10, 20, 30, 40, 50]\r\n    }\r\n]\r\n\r\nconst defaultValues = {\r\n    initialInvestment: 5000,\r\n    monthlyDeposits: 500,\r\n    yearsToRetire: 20,\r\n    monthlyWithdrawals: 1200,\r\n    yearsInRetirement: 40,\r\n    roiMean: 7,\r\n    roiStsdv: 19\r\n}\r\n\r\nconst Form = ({ setState }) => {\r\n    const [input, setInput] = useState(defaultValues)\r\n\r\n    useEffect(() => {\r\n        // Use the form initial values to do the first calculation\r\n        handleCalculations()\r\n    }, [])\r\n\r\n    const handleChange = (name, value) => {\r\n        // let name = e.target.parentNode.id\r\n        // console.log(name, value)\r\n        setInput({ ...input, [name]: value })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        //console.log(e.target)\r\n        e.preventDefault()\r\n        handleCalculations()\r\n    }\r\n\r\n    const handleCalculations = () => {\r\n        let random = { ...input, roiMean: input.roiMean / 100, roiStsdv: input.roiStsdv / 100 }\r\n        let res = runAnalysis({ ...random, roiStsdv: 0}, random)\r\n        // console.log(res)\r\n        setState(res)\r\n    }\r\n    // console.log('render FORM')\r\n    return (\r\n        <form onSubmit={handleSubmit}\r\n            className=\"input-form\">\r\n            <Subtitle>Scenario parameters</Subtitle>\r\n            {SCENARIO_INPUTS.map(\r\n                ({label, name, min, max, step, marks, factor, suffix}, i) => \r\n                <CustomSlider\r\n                    key={i}\r\n                    label={label}\r\n                    name={name}\r\n                    value={input[name]}\r\n                    defaultValue={defaultValues[name]}\r\n                    onChange={handleChange}\r\n                    min={min} max={max} step={step}\r\n                    marks={marks}\r\n                    factor={factor}\r\n                    suffix={suffix}\r\n                />\r\n            )}\r\n            <Subtitle>Expected annual returns (normal distribution)</Subtitle>\r\n            {RETURNS_INPUTS.map(\r\n                ({label, name, min, max, step, marks, factor, suffix}, i) => \r\n                <CustomSlider\r\n                    key={i}\r\n                    label={label}\r\n                    name={name}\r\n                    value={input[name]}\r\n                    defaultValue={defaultValues[name]}\r\n                    onChange={handleChange}\r\n                    min={min} max={max} step={step}\r\n                    marks={marks}\r\n                    factor={factor}\r\n                    suffix={suffix}\r\n                />\r\n            )}\r\n            <button type=\"submit\" name=\"btn\" className=\"btn\">\r\n                Run simulation\r\n            </button>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form","import { Subtitle } from './Common'\r\nimport { convertToMoney, convertToPercetage } from '../utils'\r\n\r\n\r\nconst InfoCard = ({\r\n    title,\r\n    info = []\r\n}) =>\r\n    <div className=\"results-card\">\r\n        <Subtitle>{title}</Subtitle>\r\n        {info.map((item, index) =>\r\n            typeof item === \"string\"\r\n                ? <p key={index}>{item}</p>\r\n                : <p {...item} key={index}>{item.text}</p>\r\n        )}\r\n    </div>\r\n\r\nconst Analysis = ({ state }) => {\r\n    // console.log(state.lastYear.normalDistribution)\r\n    return (\r\n        <div className=\"cards-container\">\r\n            <InfoCard\r\n                title=\"1000 random simulations\"\r\n                info={[\r\n                    { variant: \"subtitle1\", text: `Your investment in ${state.lastYear.year}:` },\r\n                    // `- Mean: ${convertToMoney(state.lastYear.normalDistribution.mean)}`,\r\n                    // `- Standard deviation: ${convertToMoney(state.lastYear.normalDistribution.standardDeviation)}`,\r\n                    `- ${convertToPercetage(state.probabilities.noBankrupcy)} probability of still having money`,\r\n                    `- ${convertToPercetage(state.probabilities.lastYearGEdeposited)} probability of having at least ${convertToMoney(state.lastYear.deposited)} (your deposits)`\r\n                ]}\r\n            />\r\n            <InfoCard\r\n                title=\"Scenario Analysis\"\r\n                info={[\r\n                    `Total deposits: ${convertToMoney(state.lastYear.deposited)}`,\r\n                    `Total withdrawals: ${convertToMoney(state.lastYear.withdrawn)}`,\r\n                    `Withdrawals in the first year of retirement (${state.retirementStart.year}): ${convertToMoney(state.scenario.yearlyWithdrawals)}`,\r\n                    { variant: \"subtitle1\", text: \"Constant returns hypothesis:\" },\r\n                    `- Retirement (${state.retirementStart.year}): \r\n                    ${convertToMoney(state.retirementStart.constant)}`,\r\n                    `- Gains during the first year in retirement: \r\n                    ${convertToMoney(1e3 * state.retirementStart.firstYearGains)}`,\r\n                    `- Last year (${state.lastYear.year}): \r\n                    ${convertToMoney(state.lastYear.constant)}`,\r\n                    state.yearBankrupcy.constant ? `- No money left in ${state.yearBankrupcy.constant}` : \"\",\r\n                    { variant: \"subtitle1\", text: \"One random simulation:\" },\r\n                    `- Retirement (${state.retirementStart.year}): \r\n                    ${convertToMoney(state.retirementStart.random)}`,\r\n                    `- Last year (${state.lastYear.year}): \r\n                    ${convertToMoney(state.lastYear.random)}`,\r\n                    state.yearBankrupcy.random ? `- No money left in ${state.yearBankrupcy.random}` : \"\",\r\n                ]}\r\n\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Analysis","import { ResponsiveLine } from '@nivo/line'\r\n\r\nimport { convertToMoney } from '../utils'\r\n\r\n\r\n/*\r\nTODO check when @nivo and react-spring fix the issue with the tooltip\r\n\r\nhttps://github.com/plouc/nivo/issues/1290\r\n\"We switched to react-spring v9 and it is an issue there. \r\nWe won't be able to fix it until they release a new version. \r\nThere are some workarounds you can try in your project. pmndrs/react-spring#1078\"\r\n*/\r\n\r\nconst Tooltip = ({ index, data }) => {\r\n    index %= data.length\r\n    return(\r\n        <div className=\"tooltip\">\r\n            <p>Year {data[index].year}</p>\r\n            <p>Constant returns: {convertToMoney(1e3 * data[index].constant)}</p>\r\n            <p>Random returns: {convertToMoney(1e3 * data[index].random)}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Chart = ({ data, years }) => {\r\n    // console.log(data)\r\n    return (\r\n        <div className=\"chart\">\r\n            <ResponsiveLine\r\n                data={[\r\n                    {\r\n                        id: \"constant\", color: \"hsl(18, 13%, 20%)\",\r\n                        data: data.map(item => ({ x: item.year, y: item.constant }))\r\n                    }, {\r\n                        id: \"random\", color: \"hsl(8, 13%, 20%)\",\r\n                        data: data.map(item => ({ x: item.year, y: item.random }))\r\n                    },\r\n                ]}\r\n                margin={{ top: 32, right: 32, bottom: 64, left: 40 }}\r\n                xScale={{ type: 'point' }}\r\n                yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: false, reverse: false }}\r\n                yFormat=\" >-.2f\"\r\n                tooltip={({ point }) => <Tooltip index={point.index} data={data} />}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={{\r\n                    tickValues: [years.this, years.retirement, years.last],\r\n                    legend: 'year',\r\n                    legendOffset: 30,\r\n                    legendPosition: 'middle'\r\n                }}\r\n                axisLeft={{\r\n                    orient: 'left',\r\n                    // legend: 'Money [k]',\r\n                    // legendOffset: -48,\r\n                    legendPosition: 'middle',\r\n                    color: \"white\"\r\n                }}\r\n                theme={{\r\n                    //['grid', 'markers', 'axes', 'areas', 'crosshair', 'lines', 'points', 'slices', 'mesh', 'legends'\r\n                    background: \"hsl(220, 13%, 18%)\",\r\n                    textColor: \"white\",\r\n                    fontSize: 11,\r\n                    axis: {\r\n                        domain: {\r\n                            line: {\r\n                                stroke: \"hsl(220, 13%, 80%)\",\r\n                                strokeWidth: 1\r\n                            }\r\n                        },\r\n                        ticks: {\r\n                            line: {\r\n                                stroke: \"hsl(220, 13%, 30%)\",\r\n                                strokeWidth: 1\r\n                            }\r\n                        }\r\n                    },\r\n                    grid: {\r\n                        line: {\r\n                            stroke: \"hsl(220, 13%, 23%)\",\r\n                            strokeWidth: 1\r\n                        }\r\n                    },\r\n                    crosshair: {\r\n                        line: {\r\n                            stroke: \"hsl(220, 13%, 80%)\"\r\n                        }\r\n                    },\r\n                    tooltip: {\r\n                        container: {\r\n                            background: \"hsl(220, 13%, 23%)\",\r\n                            color: \"white\"\r\n                        }\r\n                    }\r\n                }}\r\n                pointSize={0}\r\n                useMesh={true}\r\n                legends={[\r\n                    {\r\n                        anchor: 'top-left',\r\n                        direction: 'row',\r\n                        justify: false,\r\n                        translateX: 100,\r\n                        translateY: 0,\r\n                        itemsSpacing: 0,\r\n                        itemDirection: 'left-to-right',\r\n                        itemWidth: 80,\r\n                        itemHeight: 20,\r\n                        itemOpacity: 0.75,\r\n                        symbolSize: 12,\r\n                        symbolShape: 'circle',\r\n                        symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemBackground: 'rgba(0, 0, 0, .03)',\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React, { useState } from 'react'\n\nimport './App.css'\n\nimport Form from './Components/Form'\n// import Chart from './Components/Chart'\nimport Analysis from './Components/Analysis'\nimport Chart from './Components/Chart'\n// import Help from './Components/Help'\n\n\nconst defaultState = {\n    scenario: {\n        initialInvestment: 0,\n        monthlyDeposits: 0,\n        monthlyWithdrawals: 0,\n        yearlyWithdrawals: 0\n    },\n    retirementStart: {\n        year: 0,\n        constant: 0,\n        random: 0,\n        firstYearGains: 0\n    },\n    lastYear: {\n        year: 0,\n        deposited: 0,\n        withdrawn: 0,\n        constant: 0,\n        random: 0,\n        normalDistribution: { mean: 0, standardDeviation: 0 }\n    },\n    yearBankrupcy: {},\n    probabilities: { noBankrupcy: 0, lastYearGEdeposited: 0 },\n    plotData: [{ year: 1, constant: 0, random: 0 }]\n}\n\nfunction App() {\n    const [state, setState] = useState(defaultState)\n\n    //   console.log('render index')\n    return (\n        <div className=\"\">\n\n            <h1 className=\"title\">Investment compounding</h1>\n            {/* <Help /> */}\n\n            <div className=\"page\">\n\n                <Form setState={setState} />\n                <Analysis state={state} />\n                <Chart\n                    data={state.plotData}\n                    years={({ \n                        this: new Date().getFullYear(),\n                        retirement: state.retirementStart.year,\n                        last: state.lastYear.year\n                    })}\n                />\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}